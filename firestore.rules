/**
 * @fileoverview Firestore Security Rules for AI Habitual application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has full control
 * over their own data, and no access to other users' data. Data validation is
 * relaxed in this prototyping phase, focusing on authorization checks.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only by the user.
 * - /users/{userId}/habits/{habitId}: Stores habits for a specific user, accessible only by that user.
 *
 * Key Security Decisions:
 * - Users can only access their own data, enforced through the `isOwner(userId)` function.
 * - Listing of users is not allowed to protect user privacy.
 *
 * Denormalization for Authorization:
 *  - The `userId` is present in the path for both `/users/{userId}` and `/users/{userId}/habits/{habitId}`,
 *    eliminating the need for `get()` calls to check ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @allow (get) User with ID 'user123' can read their profile.
     * @allow (update) User with ID 'user123' can update their profile.
     * @allow (delete) User with ID 'user123' can delete their profile.
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     * @deny (update) User with ID 'user456' cannot update profile of 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete the profile of 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Users can create their own document, provided the userId matches.
      allow create: if isSignedIn() && isNewOwner(userId);

      // Users can read their own document.
      allow get: if isSignedIn() && isOwner(userId);

      // Users can update their own document.
      allow update: if isSignedIn() && isExistingOwner(userId);

      // Users can delete their own document.
      allow delete: if isSignedIn() && isExistingOwner(userId);

      // Do not allow listing of users collection.
      allow list: if false;
    }

    /**
     * @description Controls access to habits for a specific user.
     * @path /users/{userId}/habits/{habitId}
     * @allow (create) User with ID 'user123' can create a habit.
     * @allow (get) User with ID 'user123' can read one of their habits.
     * @allow (update) User with ID 'user123' can update one of their habits.
     * @allow (delete) User with ID 'user123' can delete one of their habits.
     * @deny (create) User with ID 'user456' cannot create a habit for 'user123'.
     * @deny (update) User with ID 'user456' cannot update a habit of 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete a habit of 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/habits/{habitId} {
      // Only the owner can create habits.
      allow create: if isSignedIn() && isOwner(userId);

      // Only the owner can read their own habits.
      allow get: if isSignedIn() && isOwner(userId);

      // Only the owner can list their own habits.
      allow list: if isSignedIn() && isOwner(userId);

      // Only the owner can update their own habits, and the document must exist.
      allow update: if isSignedIn() && isExistingOwner(userId);

      // Only the owner can delete their own habits, and the document must exist.
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the resource.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the user is creating their own user document.
  function isNewOwner(userId) {
    return request.auth.uid == userId;
  }

    // Helper function to determine if the user is the owner of the existing resource.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}